
generate_start_pops = {
	optimize_memory
	if = {
		limit = {
			owner = {
				has_valid_civic = civic_machine_soul_servant
			}
		}
		owner = {
			create_built_robot_species = yes
		}
		while = {
			count = 8
			create_pop = {
				species = last_created_species
			}
		}
		add_building = building_mecha_monastery
		remove_building = building_temple
		if = {
			limit = {
				owner = {
					has_origin = origin_machine_cult
				}
			}
			add_building = building_mechanical_sanctuary
		}
		while = {
			limit = {
				num_pops < 27
			}
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_symbiotic_race
					has_origin = origin_atomic_heart
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_machine_financial_investment
				}
			}
		}

		if = { limit = { last_created_species = { is_species_class = MACHINE } }
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = { save_event_target_as = last_created_species }
		}

		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					    has_origin = origin_symbiotic_race
					    has_origin = origin_atomic_heart
					}
				}
			}

			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_syncretic_evolution
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_atomic_heart
							is_gestalt = no
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_full
					}
				}
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_atomic_heart
							is_gestalt = yes
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_limited
					}
				}
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						OR = {
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							is_gestalt = yes
						}
					}
				}
				while = {
					count = 6
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else_if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						is_gestalt = yes
					}
				}
				while = {
					count = 9
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else = {
				while = {
					count = 12
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
		}

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			last_created_species = {
				if = {
					limit = {
						ROOT = { is_planet_class = pc_shattered_ring_habitable }
					}
					modify_species = {
						species = this
						ideal_planet_class = home_planet
					}
				}
				set_citizenship_type = {
					country = root.owner
					type = citizenship_limited
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_organic_trophy
				}
			}
			while = {
				count = 5
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}

		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_servitor
					has_origin = origin_true_yuht
				}
			}
			last_created_species = {
				if = {
					limit = {
						ROOT = { is_planet_class = pc_shattered_ring_habitable }
					}
					modify_species = {
						species = this
						ideal_planet_class = home_planet
					}
				}
				set_citizenship_type = {
					country = root.owner
					type = citizenship_limited
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_organic_trophy
				}
			}
			while = {
				count = 10
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_assimilator }
			}
			last_created_species = {
				if = {
					limit = {
						ROOT = { is_planet_class = pc_shattered_ring_habitable }
					}
					modify_species = {
						species = this
						ideal_planet_class = home_planet
					}
				}
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full_machine
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
			}
			while = {
				count = 10
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_financial_investment }
			}
			last_created_species = {
				if = {
					limit = {
						ROOT = { is_planet_class = pc_shattered_ring_habitable }
					}
					modify_species = {
						species = this
						ideal_planet_class = home_planet
					}
				}
			}
			while = {
				count = 5
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}
	}

	if = {
		limit = { owner = { has_origin = origin_mechanists } }
		owner = {
			create_built_robot_species = yes
		}
		while = {
			count = 8
			create_pop = {
				species = last_created_species
			}
		}
		every_owned_pop = {
			limit = {
				has_job = miner
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_power_drills
				add_trait = trait_robot_bulky
				add_trait = trait_robot_high_maintenance
				add_traits_at_start_of_list = yes
			}
		}
		every_owned_pop = {
			limit = {
				has_job = farmer
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_harvesters
				add_trait = trait_robot_bulky
				add_trait = trait_robot_high_maintenance
				add_traits_at_start_of_list = yes
			}
		}
		every_owned_pop = {
			limit = {
				has_job = technician
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_superconductive
				add_trait = trait_robot_bulky
				add_trait = trait_robot_high_maintenance
				add_traits_at_start_of_list = yes
			}
		}

		add_building = building_robot_assembly_plant
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
		while = {
			limit = { num_pops < 27 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				NOR = { #purges them instead
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
				}
			}
		}
		if = {
			limit = {
				owner = { has_valid_civic = civic_agrarian_idyll } # Needs an extra building slot
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}

		add_building = building_necrophage_elevation_chamber
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		add_building = building_clone_army_clone_vat
		add_building = building_clone_army_clone_vat
		planet_event = { id = clones.10 days = 1095 random = 730 }
	}
	if = {
		limit = { owner = { is_hive_empire = yes } }
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { has_valid_civic = civic_machine_servitor } }
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		while = {
			limit = { num_pops < 29 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_megacorp = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_broken_shackles }
			num_pops < 6
		}

		while = {
			limit = { num_pops < 6 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_payback }
			num_pops < 18
		}
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_fear_of_the_dark }
		}
		while = {
			count = 20
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { #homicidal necrophages lose 1/4 of their necrophytes to fleeing
			owner = {
				has_origin = origin_necrophage
				is_homicidal = yes
			}
		}
		while = {
			count = 2
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
		}
		while = {
			count = 4
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_true_yuht
				NOT = { has_valid_civic = civic_machine_servitor }
			}
		}
		while = {
			count = 57
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_true_yuht
				has_valid_civic = civic_machine_servitor
			}
		}
		while = {
			count = 42
			create_pop = {
				species = root.owner.species
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_thirteen_monkeys }
		}
		while = {
			count = 30
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
				NOR = {
					has_origin = origin_advanced_start
					has_origin = origin_sprout
				}
			}
		}
		while = {
			count = 10
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_sprout
			}
		}
		while = {
			count = 31
			random_owned_pop = {
				kill_pop = yes
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_taking_care_of_god
			}
		}
		while = {
			count = 5
			random_owned_pop = {
				modify_species = {
					species = this
					add_trait = trait_fallen_god
					add_traits_at_start_of_list = yes
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}	
				}
			}
		}
	}

	# Cybernetic Creed: add Unique Traits
	if = {
		limit = {
			owner = {
				has_origin = origin_cybernetic_creed
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
				modify_species = {
					species = this
					add_trait = trait_cyborg_ritualistic_implants
					add_traits_at_start_of_list = yes
				}
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					has_cybernetic_creed_trait = no
					OR = {
						is_pop_category = ruler
						is_pop_category = specialist
					}
				}
			}
			random_owned_pop = {
				limit = {
					has_cybernetic_creed_trait = no
				}
				clear_pop_category = yes
			}
		}
		owner = {
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = no
			}
		}
	}

	#Synthetic Fertility
	if = {
		limit = {
			owner = { has_origin = origin_synthetic_fertility }
		}
		while = {
			count = 9
			create_pop = {
				species = owner
			}
		}
	}

	if = {
		limit = {
			owner = {
				OR = {
					has_civic = civic_libido_equipment
					has_civic = civic_happiness_factory
				}
			}
		}
		add_building = building_clone_vats
	}
}

advanced_start_pops_and_buildings = {
	while = {
		count = 24
		create_pop = {
			species = owner_main_species
			ethos = random
		}
	}

	if = {
		limit = {
			owner = {
				OR = {
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}

		if = { limit = { last_created_species = { is_species_class = MACHINE } }
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = { save_event_target_as = last_created_species }
		}

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			last_created_species = {
				if = {
					limit = {
						ROOT = { is_planet_class = pc_shattered_ring_habitable }
					}
					modify_species = {
						species = this
						ideal_planet_class = home_planet
					}
				}
				set_citizenship_type = {
					country = root.owner
					type = citizenship_limited
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_organic_trophy
				}
			}
			while = {
				count = 5
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_assimilator }
			}
			last_created_species = {
				if = {
					limit = {
						ROOT = { is_planet_class = pc_shattered_ring_habitable }
					}
					modify_species = {
						species = this
						ideal_planet_class = home_planet
					}
				}
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full_machine
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
			}
			while = {
				count = 5
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
			owner = {
				country_event = {
					id = syndaw.1
					days = 1
				}
			}
		}
	}

	while = {
		count = 2
		if = { limit = { owner = { is_gestalt = no } }
			add_district_and_planet_size_if_needed_effect = { district = district_city }
		}
		if = { limit = { owner = { is_machine_empire = yes } }
			add_district_and_planet_size_if_needed_effect = { district = district_nexus }
		}
		if = { limit = { owner = { is_hive_empire = yes } }
			add_district_and_planet_size_if_needed_effect = { district = district_hive }
		}
	}

	if = {
		limit = { owner = { is_regular_empire = yes } }

		## total - 24 jobs
		# 3 jobs
		add_district_and_planet_size_if_needed_effect = {
			district = district_city
		}
		if = {
			limit = {
				owner = { NOT = { has_valid_civic = civic_agrarian_idyll } }
			}
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
			}
		}
		else = {
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
		}
		if = {
			limit = { owner = { is_megacorp = yes } }
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}
		# 4 - 6 jobs
		if = {
			limit = {
				owner = {
					OR = {
						is_lithoid_empire = no
						has_country_flag = non_lithoid_subspecies
					}
				}
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
			if = {
				limit = {
					NOT = { owner = { has_origin = origin_payback } }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_default
						is_eager_explorer_empire = no
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
		}
		else = {
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_default
						is_eager_explorer_empire = no
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}
		}
		# 4 jobs
		add_district_and_planet_size_if_needed_effect = {
			district = district_mining
		}
		# 2 jobs
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
		# 4 jobs
		add_district_and_planet_size_if_needed_effect = {
			district = district_industrial
		}
		add_district_and_planet_size_if_needed_effect = {
			district = district_industrial
		}
		# 2 jobs
		if = {
			limit = {
				owner = { is_megacorp = no }
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}
		}
		# 2 jobs
		if = {
			limit = {
				owner = { has_origin = origin_default }
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}
		}
		# 3 jobs
		add_building = building_capital
		# 2 jobs
		if = {
			limit = { owner = { NOT = { has_valid_civic = civic_proletarian_culture } } }
			add_building = building_holo_theatres
		}
		else_if = {
			limit = { owner = { has_valid_civic = civic_proletarian_culture } }
			add_building = building_cultural_palace
		}

		# 1 job
		if = {
			limit = {
				owner = { has_valid_civic = civic_permanent_employment }
			}
			add_building = building_posthumous_employment_center
		}
		# 2 Jobs
		if = {
			limit = {
				owner = { has_valid_civic = civic_environmentalist }
			}
			add_building = building_ranger_lodge
			add_blocker = { type = d_big_nature_preserve_blocker }
		}
		# 4-5 jobs
		if = {
			limit = {
				owner = {
					NOT = { has_valid_civic = civic_agrarian_idyll }
				}
			}
			if = {
				limit = {
					owner = {
						is_spiritualist = no
						has_valid_civic = civic_pleasure_seekers
					}
				}
				add_building = building_holo_theatres
				add_district_and_planet_size_if_needed_effect = {
					district = district_industrial
				}
			}
			else_if = {
				limit = {
					owner = {
						is_spiritualist = yes
						OR = {
							has_valid_civic = civic_death_cult
							has_valid_civic = civic_death_cult_corporate
						}
					}
				}
				add_building = building_sacrificial_temple_1
				add_district_and_planet_size_if_needed_effect = {
					district = district_industrial
				}
			}
			else_if = {
				limit = {
					owner = {
						is_megacorp = no
						is_spiritualist = yes
					}
				}
				add_building = building_temple
				if = {
					limit = {
						owner = {
							is_anglers_empire = yes
							is_catalytic_empire = yes
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
				else = {
					add_district_and_planet_size_if_needed_effect = {
						district = district_industrial
					}
				}
			}
			else = {
				add_building = building_commercial_zone
			}
		}
	}

	if = {
		limit = { owner = { is_hive_empire = yes } }

		# 9 jobs
		while = {
			count = 3
			add_district_and_planet_size_if_needed_effect = {
				district = district_hive
			}
		}
		# 6-9 jobs
		if = {
			limit = { owner = { is_lithoid_empire = no } }
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
			if = {
				limit = {
					owner = { has_origin = origin_default }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
		}
		else = {
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}
			if = {
				limit = {
					owner = { has_origin = origin_default }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}
		}
		# 6 jobs
		while = {
			count = 2
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining
			}
		}
		if = {
			limit = {
				owner = { has_origin = origin_tree_of_life }
			}
			remove_district = district_mining
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
		}
		# 6 jobs
		while = {
			count = 2
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}
		}
		# 3 jobs
		if = {
			limit = {
				owner = {
					has_origin = origin_default
					is_eager_explorer_empire = no
				}
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}
		}
		# 2 jobs
		add_district_and_planet_size_if_needed_effect = {
			district = district_industrial
		}
		# 5 jobs
		add_building = building_hive_capital
		# 2 jobs
		add_building = building_research_lab_1
		if = {
			limit = { #Necrophages need fewer complex drones or the menial drone slots won't be filled
				owner = {
					OR = {
						AND = {
							has_origin = origin_necrophage
							has_valid_civic = civic_hive_devouring_swarm
						}
						NOT = { has_origin = origin_necrophage }
					}
				}
			}
			# 2 jobs
			add_building = building_hive_node
		}
		if = { #This building is very useless for Devouring Swarm Necrophages
			limit = {
				NOT = {
					owner = {
						has_origin = origin_necrophage
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
			# 1 job
			add_building = building_spawning_pool
		}
	}

	if = {
		limit = { owner = { is_machine_empire = yes } }

		## total - 27 jobs
		# 3 jobs
		while = {
			count = 2
			add_district_and_planet_size_if_needed_effect = {
				district = district_nexus
			}
		}
		# 2 jobs
		add_district_and_planet_size_if_needed_effect = {
			district = district_industrial
		}
		# 6 jobs
		add_building = building_machine_capital
		# 1 job
		add_building = building_machine_assembly_plant
		# 2 job
		if = {
			limit = { owner = { NOT = { has_valid_civic = civic_machine_servitor } } }
			add_building = building_uplink_node
		}
		# 2 jobs
		add_building = building_research_lab_1
		# 4 jobs
		add_district_and_planet_size_if_needed_effect = {
			district = district_mining
		}
		# 2 jobs
		if = {
			limit = {
				owner = { has_origin = origin_default }
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining
			}
		}
		# 8 jobs
		while = {
			count = 4
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}
		}
		# 2 jobs
		if = {
			limit = {
				owner = { has_origin = origin_default }
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}
		}
		#Assimilators
		if = {
			limit = { owner = { has_civic = civic_machine_assimilator } }
			remove_district = district_generator
			if = {
				limit = { owner = { has_country_flag = lithoid_subspecies } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}
			else = {
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
		}
		#Servitors
		if = {
			limit = { owner = { has_civic = civic_machine_servitor } }
			if = {
				limit = { owner = { has_country_flag = lithoid_subspecies } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}
			else = {
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_nexus
			}
			add_building = building_organic_sanctuary
		}
		# Resource Consolidation
		else = {
			while = {
				count = 4
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator_uncapped
				}
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}
			#Assimilators
			if = {
				limit = { owner = { has_civic = civic_machine_assimilator } }
				add_deposit = d_organic_slurry
			}
		}
	}

	# Replace a mining district with a farming district for lithoid empires with an organic secondary species that use food for alloy production
	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				has_country_flag = non_lithoid_subspecies
				is_catalytic_empire = yes
			}
		}
		remove_district = district_mining
		add_district_and_planet_size_if_needed_effect = {
			district = district_farming
		}
	}

	# Replace two mining districts with farming district for non-machine empires that use food for alloy production
	if = {
		limit = {
			owner = {
				NOT = { has_country_flag = non_lithoid_subspecies }
				NOT = { has_authority = auth_machine_intelligence }
				is_catalytic_empire = yes
			}
		}
		while = {
			count = 2
			remove_district = district_mining
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
		}
	}

	# And machine empires swap a generator district for another farming district
	if = {
		limit = {
			owner = {
				has_authority = auth_machine_intelligence
				is_catalytic_empire = yes
			}
		}
		remove_district = district_mining
		add_district_and_planet_size_if_needed_effect = {
			district = district_farming
		}
		remove_district = district_generator
		add_district_and_planet_size_if_needed_effect = {
			district = district_farming
		}
	}

	# Replace 1 generator district with 1 farming district for anglers civic on wet worlds
	if = {
		limit = {
			owner = { is_anglers_empire = yes }
			has_climate = wet
		}
		remove_district = district_generator
		add_district = district_farming
	}

	# Replace farming districts with uncapped ones for anglers civic on ocean worlds
	if = {
		limit = {
			owner = { is_anglers_empire = yes }
			is_planet_class = pc_ocean
		}
		while = {
			limit = { num_districts = { type = district_farming value > 0 } }
			remove_district = district_farming
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming_uncapped
			}
		}
	}

	# Replace mining districts with uncapped ones for subterranean origin
	if = {
		limit = {
			owner = { is_subterranean_empire = yes }
		}
		while = {
			limit = { num_districts = { type = district_mining value > 0 } }
			remove_district = district_mining
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}
		}
	}

	# Give Idyllic Bloom a Gaiaseeder to start with if they have room
	if = {
		limit = {
			owner = {
				OR = {
					has_valid_civic = civic_idyllic_bloom
					has_valid_civic = civic_hive_idyllic_bloom
				}
				NOT = { has_origin = origin_life_seeded }
			}
			free_building_slots > 0
		}
		add_building = building_gaiaseeders_1
	}
}

#红色起源
red_origin_start_effect = {
	# Main Backup
	if = { # Backup if the main system hasn't already been initialized
		limit = {
			NOT = { exists = event_target:origin_red_homeland_country }
		}
		# Find a random system, hopefully close to a player with the origin
		random_system = {
			limit = {
				has_owner = no
				has_special_star_flag_trigger = no
			}
			weights = {
				base = 1
				modifier = {
					factor = 100
					closest_system = {
						use_bypasses = no
						min_steps = 2
						max_steps = 4
						limit = {
							has_owner = yes
							owner = {
								has_origin = origin_red_satellite
							}
						}
					}
				}
			}
			# Start Spawning Systems
			set_spawn_system_batch = begin
			red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_init }
			# Main Empire
			event_target:origin_red_homeland.solar_system = {
				red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_2_init }
				red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_3_init }
			}
			# Vassals
			event_target:red_homeland_2.solar_system = { red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_4_init } }
			if = {
				limit = {
					NOT = {
						galaxy_size = tiny
					}
				}
				event_target:red_homeland_2.solar_system = { red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_5_init } }
			}
			if = {
				limit = {
					NOR = {
						galaxy_size = tiny
						galaxy_size = small
					}
				}
				event_target:red_homeland_3.solar_system = { red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_6_init } }
			}
			if = {
				limit = {
					NOR = {
						galaxy_size = tiny
						galaxy_size = small
						galaxy_size = medium
					}
				}
				event_target:red_homeland_3.solar_system = { red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_7_init } }
			}
			set_spawn_system_batch = end

			# Set up hyperlanes if they are missing
			red_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:red_homeland_2.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_red_homeland.solar_system
			}
			red_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:red_homeland_3.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_red_homeland.solar_system
			}
			red_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:red_homeland_4.solar_system
				SECOND_STAR_SYSTEM = event_target:red_homeland_2.solar_system
			}
			if = {
				limit = {
					exists = event_target:red_homeland_5
				}
				red_origin_start_hyperlane_effect = {
					ORIGINAL_STAR_SYSTEM = event_target:red_homeland_5.solar_system
					SECOND_STAR_SYSTEM = event_target:red_homeland_2.solar_system
				}
			}
			if = {
				limit = {
					exists = event_target:red_homeland_6
				}
				red_origin_start_hyperlane_effect = {
					ORIGINAL_STAR_SYSTEM = event_target:red_homeland_6.solar_system
					SECOND_STAR_SYSTEM = event_target:red_homeland_3.solar_system
				}
			}
			if = {
				limit = {
					exists = event_target:red_homeland_7
				}
				red_origin_start_hyperlane_effect = {
					ORIGINAL_STAR_SYSTEM = event_target:red_homeland_7.solar_system
					SECOND_STAR_SYSTEM = event_target:red_homeland_3.solar_system
				}
			}
		}
	}
	else_if = {
		limit = { # Backup if any of the other main empire systems are missing
			OR = {
				NOT = { any_system = { has_star_flag = soviet_union_system_2_flag } }
				NOT = { any_system = { has_star_flag = soviet_union_system_3_flag } }
			}
		}
		event_target:origin_red_homeland.solar_system = {
			red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_2_init }
			red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_3_init }
			red_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:red_homeland_2.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_red_homeland.solar_system
			}
			red_origin_start_hyperlane_effect = {
				ORIGINAL_STAR_SYSTEM = event_target:red_homeland_3.solar_system
				SECOND_STAR_SYSTEM = event_target:origin_red_homeland.solar_system
			}
		}
	}

	# Vassal Backup
	if = { # Backup for vassal 1
		limit = {
			any_system = { has_star_flag = soviet_union_system_2_flag }
			NOT = { any_system = { has_star_flag = soviet_union_system_4_flag } }
		}
		red_origin_vassal_backup_effect = {
			SYSTEM_FLAG = soviet_union_system_2_flag
			INITIALIZER = soviet_union_system_4_init
			ORIGINAL_STAR_SYSTEM = event_target:red_homeland_4.solar_system
		}
	}
	if = { # Backup for vassal 2
		limit = {
			any_system = { has_star_flag = soviet_union_system_2_flag }
			NOR = {
				galaxy_size = tiny
				any_system = { has_star_flag = soviet_union_system_5_flag }
			}
		}
		red_origin_vassal_backup_effect = {
			SYSTEM_FLAG = soviet_union_system_2_flag
			INITIALIZER = soviet_union_system_5_init
			ORIGINAL_STAR_SYSTEM = event_target:red_homeland_5.solar_system
		}
	}
	if = { # Backup for vassal 3
		limit = {
			any_system = { has_star_flag = soviet_union_system_3_flag }
			NOR = {
				galaxy_size = tiny
				galaxy_size = small
				any_system = { has_star_flag = soviet_union_system_6_flag }
			}
		}
		red_origin_vassal_backup_effect = {
			SYSTEM_FLAG = soviet_union_system_3_flag
			INITIALIZER = soviet_union_system_6_init
			ORIGINAL_STAR_SYSTEM = event_target:red_homeland_6.solar_system
		}
	}
	if = { # Backup for vassal 4
		limit = {
			any_system = { has_star_flag = soviet_union_system_3_flag }
			NOR = {
				galaxy_size = tiny
				galaxy_size = small
				galaxy_size = medium
				any_system = { has_star_flag = soviet_union_system_7_flag }
			}
		}
		red_origin_vassal_backup_effect = {
			SYSTEM_FLAG = soviet_union_system_3_flag
			INITIALIZER = soviet_union_system_7_init
			ORIGINAL_STAR_SYSTEM = event_target:red_homeland_7.solar_system
		}
	}

	# Modifier to reduce influence
	event_target:origin_red_homeland_country = {
		add_modifier = {
			modifier = imperial_vassal_ai_modifier
			days = -1
		}
	}

	# Rival Country
	if = {
		limit = {
			OR = {
				AND = {
					is_multiplayer = yes
					NOT = {
						count_country = {
							count >= 2
							limit = {
								is_ai = no
								has_origin = origin_red_satellite
							}
						}
					}
				}
				is_multiplayer = no
			}
		}
		random_country = {
			limit = {
				is_ai = yes
				has_origin = origin_red_satellite
			}
			set_country_flag = origin_red_satellite_rival_country
		}
	}

	# Startup event for vassals
	every_playable_country = {
		limit = { has_origin = origin_red_satellite }
		country_event = { id = red_origin.5700 }
		if = {
			limit = {
				always = yes
			}
			country_event = {
				id = red_origin.5703
				days = 1
			}
		}
		else = {
			country_event = { id = red_origin.5710 }
		}
	}
	every_country = {
		limit = {
			is_ai = yes
			has_origin = origin_red_satellite
		}
		country_event = { id = red_origin.5711 }
	}
}

red_origin_start_hyperlane_effect = {
	if = {
		limit = {
			NOT = {
				$ORIGINAL_STAR_SYSTEM$ = {
					has_hyperlane_to = $SECOND_STAR_SYSTEM$
				}
			}
		}
		add_hyperlane = {
			from = $ORIGINAL_STAR_SYSTEM$
			to = $SECOND_STAR_SYSTEM$
		}
	}
}

red_origin_start_spawn_effect = {
	spawn_system = {
		min_distance = 10
		max_distance = 30
		max_jumps = 0
		hyperlane = yes
		initializer = $INITIALIZER$
	}
}

red_origin_vassal_backup_effect = {
	random_system = {
		limit = {
			has_star_flag = $SYSTEM_FLAG$
		}
		save_event_target_as = this_system

		red_origin_start_spawn_effect = { INITIALIZER = $INITIALIZER$ }
		red_origin_start_hyperlane_effect = {
			ORIGINAL_STAR_SYSTEM = $ORIGINAL_STAR_SYSTEM$
			SECOND_STAR_SYSTEM = event_target:this_system
		}
	}
}

#开局科技
give_physics_tech_tier_1_effect = {
	give_technology = { message = no tech = tech_basic_science_lab_2 }
	give_technology = { message = no tech = tech_space_science_1 }
	give_technology = { message = no tech = tech_space_science_2 }
	give_technology = { message = no tech = tech_physics_1 }
	give_technology = { message = no tech = tech_administrative_ai }
	give_technology = { message = no tech = tech_cryostasis_1 }
	give_technology = { message = no tech = tech_automated_exploration }
	give_technology = { message = no tech = tech_combat_computers_1 }
	give_technology = { message = no tech = tech_auxiliary_fire_control }
	give_technology = { message = no tech = tech_encryption_1 }
	give_technology = { message = no tech = tech_decryption_1 }
	give_technology = { message = no tech = tech_fusion_power }
	give_technology = { message = no tech = tech_reactor_boosters_2 }
	give_technology = { message = no tech = tech_reactor_boosters_3 }
	give_technology = { message = no tech = tech_shields_2 }
	give_technology = { message = no tech = tech_power_plant_2 }
	give_technology = { message = no tech = tech_power_hub_1 }
	give_technology = { message = no tech = tech_lasers_2 }
	give_technology = { message = no tech = tech_auto_buildings }
}

give_physics_tech_tier_2_effect = {
	give_technology = { message = no tech = tech_curator_lab }
	if = {
		limit = {
			has_ancrel = yes
		}
		give_technology = { message = no tech = tech_archeology_lab_ancrel }
	}
	else = {
		give_technology = { message = no tech = tech_archeology_lab }
	}
	give_technology = { message = no tech = tech_space_science_3 }
	give_technology = { message = no tech = tech_space_science_4 }
	give_technology = { message = no tech = tech_physics_2 }
	give_technology = { message = no tech = tech_self_aware_logic }
	if = {
		limit = {
			OR = {
				is_gestalt = no
				has_valid_civic = civic_machine_servitor
			}
		}
		give_technology = { message = no tech = tech_consumer_good_refinement_1 }
	}
	give_technology = { message = no tech = tech_encryption_2 }
	give_technology = { message = no tech = tech_decryption_2 }
	give_technology = { message = no tech = tech_cold_fusion_power }
	give_technology = { message = no tech = tech_shields_3 }
	give_technology = { message = no tech = tech_shield_rechargers_1 }
	give_technology = { message = no tech = tech_sensors_2 }
	give_technology = { message = no tech = tech_power_plant_3 }
	give_technology = { message = no tech = tech_power_hub_2 }
	if = {
		limit = {
			NOT = { has_origin = origin_true_yuht }
		}
		give_technology = { message = no tech = tech_hyper_drive_2 }
	}
	give_technology = { message = no tech = tech_ftl_inhibitor }
	give_technology = { message = no tech = tech_lasers_3 }
	give_technology = { message = no tech = tech_pd_tracking_2 }
	give_technology = { message = no tech = tech_mine_volatile_motes }
	give_technology = { message = no tech = tech_adv_auto_buildings_1 }
}

give_physics_tech_tier_3_effect = {
	give_technology = { message = no tech = tech_space_science_5 }
	give_technology = { message = no tech = tech_combat_computers_2 }
	give_technology = { message = no tech = tech_encryption_3 }
	give_technology = { message = no tech = tech_decryption_3 }
	give_technology = { message = no tech = tech_antimatter_power }
	give_technology = { message = no tech = tech_reactor_boosters_3 }
	give_technology = { message = no tech = tech_shields_4 }
	give_technology = { message = no tech = tech_planetary_shield_generator }
	give_technology = { message = no tech = tech_sensors_3 }
	give_technology = { message = no tech = tech_power_plant_4 }
	give_technology = { message = no tech = tech_mine_dark_matter }
	give_technology = { message = no tech = tech_lasers_4 }
	if = {
		limit = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		give_technology = { message = no tech = tech_tech_adv_auto_buildings_2 }
	}
	else = {
		give_technology = { message = no tech = tech_tech_adv_auto_buildings_2_gestalt }
	}
}

give_physics_research_option_tier_5_effect = {
	add_research_option = tech_shield_hardeners_2
	add_research_option = tech_jump_drive_1
	add_research_option = tech_science_nexus
	add_research_option = tech_sentry_array
	add_research_option = tech_gateway_construction
	add_research_option = tech_quantum_catapult
	add_research_option = tech_jump_drive_1
	add_research_option = tech_dark_matter_detection
}

give_engineering_tech_tier_1_effect = {
	give_technology = { message = no tech = tech_corvette_build_speed }
	give_technology = { message = no tech = tech_corvette_hull_1 }
	give_technology = { message = no tech = tech_strike_craft_1 }
	give_technology = { message = no tech = tech_ship_armor_2 }
	give_technology = { message = no tech = tech_powered_exoskeletons }
	give_technology = { message = no tech = tech_space_mining_1 }
	give_technology = { message = no tech = tech_space_mining_2 }
	give_technology = { message = no tech = tech_mining_1 }
	give_technology = { message = no tech = tech_mineral_purification_1 }
	give_technology = { message = no tech = tech_alloys_1 }
	give_technology = { message = no tech = tech_luxuries_1 }
	give_technology = { message = no tech = tech_engineering_1 }
	give_technology = { message = no tech = tech_robotic_workers }
	give_technology = { message = no tech = tech_afterburners_1 }
	give_technology = { message = no tech = tech_assembly_pattern }
	give_technology = { message = no tech = tech_mass_drivers_2 }
	give_technology = { message = no tech = tech_missiles_2 }
}

give_engineering_tech_tier_2_effect = {
	give_technology = { message = no tech = tech_destroyers }
	give_technology = { message = no tech = tech_corvette_hull_2 }
	give_technology = { message = no tech = tech_destroyer_build_speed }
	give_technology = { message = no tech = tech_destroyer_hull_1 }
	give_technology = { message = no tech = tech_starbase_3 }
	give_technology = { message = no tech = tech_modular_engineering }
	give_technology = { message = no tech = tech_strike_craft_2 }
	give_technology = { message = no tech = tech_ship_armor_3 }
	give_technology = { message = no tech = tech_crystal_armor_1 }
	give_technology = { message = no tech = tech_thrusters_2 }
	give_technology = { message = no tech = tech_defense_platform_hull_1 }
	give_technology = { message = no tech = tech_space_mining_3 }
	give_technology = { message = no tech = tech_space_mining_4 }
	give_technology = { message = no tech = tech_mining_2 }
	give_technology = { message = no tech = tech_mineral_purification_2 }
	give_technology = { message = no tech = tech_advanced_metallurgy_1 }
	give_technology = { message = no tech = tech_engineering_2 }
	give_technology = { message = no tech = tech_droid_workers }
	give_technology = { message = no tech = tech_housing_1 }
	give_technology = { message = no tech = tech_mass_drivers_3 }
	give_technology = { message = no tech = tech_missiles_3 }
	give_technology = { message = no tech = tech_flak_batteries_2 }
	give_technology = { message = no tech = tech_mine_rare_crystals }
	give_technology = { message = no tech = tech_mine_exotic_gases }
}

give_engineering_tech_tier_3_effect = {
	if = {
		limit = {
			OR = {
				is_machine_empire = no
				has_civic = civic_machine_assimilator
			}
		}
		give_technology = { message = no tech = tech_integrated_cybernetics }
	}
	give_technology = { message = no tech = tech_cruisers }
	give_technology = { message = no tech = tech_destroyer_hull_2 }
	give_technology = { message = no tech = tech_cruiser_build_speed }
	give_technology = { message = no tech = tech_cruiser_hull_1 }
	give_technology = { message = no tech = tech_starbase_4 }
	give_technology = { message = no tech = tech_habitat_1 }
	give_technology = { message = no tech = tech_strike_craft_3 }
	give_technology = { message = no tech = tech_ship_armor_4 }
	give_technology = { message = no tech = tech_thrusters_3 }
	give_technology = { message = no tech = tech_space_mining_5 }
	give_technology = { message = no tech = tech_mining_3 }
	give_technology = { message = no tech = tech_alloys_2 }
	give_technology = { message = no tech = tech_luxuries_2 }
	give_technology = { message = no tech = tech_afterburners_2 }
	give_technology = { message = no tech = tech_housing_2 }
	give_technology = { message = no tech = tech_mine_living_metal }
	give_technology = { message = no tech = tech_mass_drivers_4 }
	give_technology = { message = no tech = tech_missiles_4 }
}

give_engineering_research_option_tier_5_effect = {
	add_research_option = tech_titans
	add_research_option = tech_juggernaut
	add_research_option = tech_battleship_hull_2
	add_research_option = tech_titan_hull_1
	add_research_option = tech_titan_hull_2
	add_research_option = tech_armor_hardeners_2
	add_research_option = tech_nanite_repair_system
	add_research_option = tech_nanite_autocannon
	add_research_option = tech_nanite_flak_batteries
	add_research_option = tech_mega_engineering
	add_research_option = tech_mine_living_metal
}

give_society_tech_tier_1_effect = {
	if = {
		limit = {
			is_regular_empire = yes
		}
		give_technology = { message = no tech = tech_space_trading }
	}
	give_technology = { message = no tech = tech_eco_simulation }
	give_technology = { message = no tech = tech_hydroponics }
	give_technology = { message = no tech = tech_food_processing_1 }
	give_technology = { message = no tech = tech_society_1 }
	if = {
		limit = {
			is_regular_empire = yes
		}
		give_technology = { message = no tech = tech_alien_life_studies }
	}
	if = {
		limit = {
			is_regular_empire = yes
		}
		give_technology = { message = no tech = tech_frontier_health }
	}
	give_technology = { message = no tech = tech_dense_jungle }
	give_technology = { message = no tech = tech_quicksand_basin }
	give_technology = { message = no tech = tech_noxious_swamp }
	give_technology = { message = no tech = tech_massive_glacier }
	give_technology = { message = no tech = tech_toxic_kelp }
	give_technology = { message = no tech = tech_deep_sinkhole }
	if = {
		limit = {
			OR = {
				NOT = { has_authority = auth_machine_intelligence }
				has_civic = civic_machine_assimilator
				has_civic = civic_machine_servitor
			}
		}
		give_technology = { message = no tech = tech_genome_mapping }
	}
	give_technology = { message = no tech = tech_ground_defense_planning }
	give_technology = { message = no tech = tech_planetary_unification }
	give_technology = { message = no tech = tech_adaptive_bureaucracy }
	if = {
		limit = {
			is_regular_empire = yes
		}
		give_technology = { message = no tech = tech_neural_implants }
	}
	if = {
		limit = {
			is_gestalt = no
		}
		give_technology = { message = no tech = tech_hyper_entertainment_forum }
	}
	if = {
		limit = {
			NOR = {
				has_ethic = ethic_spiritualist
				has_ethic = ethic_fanatic_spiritualist
				has_valid_civic = civic_machine_servitor
			}
		}
		give_technology = { message = no tech = tech_heritage_site }
	}
}

give_society_tech_tier_2_effect = {
	give_technology = { message = no tech = tech_gene_crops }
	give_technology = { message = no tech = tech_society_2 }
	give_technology = { message = no tech = tech_arcane_deciphering }
	if = {
		limit = {
			OR = {
				is_machine_empire = no
				has_civic = civic_machine_assimilator
				has_civic = civic_machine_servitor
			}
		}
		give_technology = { message = no tech = tech_colonization_2 }
	}
	if = {
		limit = {
			OR = {
				is_machine_empire = no
				has_civic = civic_machine_assimilator
				has_civic = civic_machine_servitor
			}
		}
		give_technology = { message = no tech = tech_colonization_3 }
	}
	if = {
		limit = {
			is_gestalt = no
		}
		give_technology = { message = no tech = tech_frontier_hospital }
	}
	give_technology = { message = no tech = tech_mountain_range }
	give_technology = { message = no tech = tech_volcano }
	give_technology = { message = no tech = tech_dangerous_wildlife }
	give_technology = { message = no tech = tech_terrestrial_sculpting }
	if = {
		limit = {
			OR = {
				NOT = { has_authority = auth_machine_intelligence }
				has_civic = civic_machine_assimilator
			}
		}
		give_technology = { message = no tech = tech_vitality_boosters }
	}
	if = {
		limit = {
			NOT = {
				has_valid_civic = civic_fanatic_purifiers
				#has_valid_civic = civic_machine_terminator # covered by not being machine
				#has_valid_civic = civic_hive_devouring_swarm # can uplift to make delicious
			}
			OR = {
				NOT = { has_authority = auth_machine_intelligence }
				has_civic = civic_machine_assimilator
				has_civic = civic_machine_servitor
			}
		}
		give_technology = { message = no tech = tech_epigenetic_triggers }
	}
	if = {
		limit = {
			OR = {
				NOT = { has_authority = auth_machine_intelligence }
				has_civic = civic_machine_assimilator
			}
		}
		give_technology = { message = no tech = tech_cloning }
	}
	if = {
		limit = {
			OR = {
				NOT = { has_authority = auth_machine_intelligence }
				has_civic = civic_machine_assimilator
			}
		}
		give_technology = { message = no tech = tech_gene_banks }
	}
	give_technology = { message = no tech = tech_doctrine_fleet_size_1 }
	give_technology = { message = no tech = tech_doctrine_fleet_size_2 }
	give_technology = { message = no tech = tech_interstellar_fleet_traditions }
	give_technology = { message = no tech = tech_doctrine_navy_size_1 }
	give_technology = { message = no tech = tech_global_defense_grid }
	give_technology = { message = no tech = tech_galactic_ambitions }
	give_technology = { message = no tech = tech_interstellar_campaigns }
	give_technology = { message = no tech = tech_colonial_centralization }
	give_technology = { message = no tech = tech_planetary_infrastructure_1 }
	if = {
		limit = {
			NOT = { has_ethic = ethic_gestalt_consciousness	}
		}
		give_technology = { message = no tech = tech_subdermal_stimulation }
	}
	give_technology = { message = no tech = tech_effective_bureaucracy }
	give_technology = { message = no tech = tech_colonial_bureaucracy }
	if = {
		limit = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		give_technology = { message = no tech = tech_living_state }
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_consciousness
		}
		give_technology = { message = no tech = tech_autonomous_agents }
	}
	if = {
		limit = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		give_technology = { message = no tech = tech_artificial_moral_codes }
	}
	if = {
		limit = {
			is_gestalt = yes
		}
		give_technology = { message = no tech = tech_unity_of_purpose }
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_consciousness
		}
		give_technology = { message = no tech = tech_holographic_rituals }
	}
	if = {
		limit = {
			is_hive_empire = yes
		}
		give_technology = { message = no tech = tech_hive_cluster }
	}
	if = {
		limit = {
			is_gestalt = no
		}
		give_technology = { message = no tech = tech_slave_colonies }
	}
	if = {
		limit = {
			is_regular_empire = yes
		}
		give_technology = { message = no tech = tech_xeno_diplomacy }
	}
	give_technology = { message = no tech = tech_capital_productivity_1 }
}

give_society_tech_tier_3_effect = {
	if = {
		limit = {
			is_gestalt = no
		}
		give_technology = { message = no tech = tech_interstellar_economics }
	}
	give_technology = { message = no tech = tech_nano_vitality_crops }
	give_technology = { message = no tech = tech_food_processing_2 }
	give_technology = { message = no tech = tech_gene_tailoring }
	give_technology = { message = no tech = tech_refit_standards }
	give_technology = { message = no tech = tech_combat_training }
	give_technology = { message = no tech = tech_psionic_theory }
	give_technology = { message = no tech = tech_galactic_bureaucracy }
	give_technology = { message = no tech = tech_centralized_command }
	if = {
		limit = {
			has_authority = auth_machine_intelligence
		}
		give_technology = { message = no tech = tech_resource_processing_algorithms }
	}
	if = {
		limit = {
			OR = {
				is_gestalt = no
				has_valid_civic = civic_machine_servitor
			}
		}
		give_technology = { message = no tech = tech_paradise_dome }
	}
	if = {
		limit = {
			NOR = {
				has_ethic = ethic_spiritualist
				has_ethic = ethic_fanatic_spiritualist
				has_valid_civic = civic_machine_servitor
			}
		}
		give_technology = { message = no tech = tech_autocurating_vault }
	}
	if = {
		limit = {
			has_valid_civic = civic_agrarian_idyll
		}
		give_technology = { message = no tech = tech_housing_agrarian_idyll }
	}
}

give_society_research_option_tier_5_effect = {
	add_research_option = tech_archaeo_pk_devolving_beam
	add_research_option = tech_strategic_coordination
	add_research_option = tech_interstellar_assembly
	add_research_option = tech_mega_art
	add_research_option = tech_mega_shipyard
	add_research_option = tech_ascension_theory
}

generate_royal_family = {
	if = {
		limit = {
			ruler = {
				leader_class = scientist
			}
		}
		create_leader = {
			class = scientist
			name = random
			species = owner_main_species
			effect = {
				remove_trait = leader_trait_eci_royalty
				add_trait_no_notify = leader_trait_eci_king
				set_council_position = councilor_king
			}
		}
		create_leader = {
			class = scientist
			name = random
			species = owner_main_species
			effect = {
				remove_trait = leader_trait_eci_royalty
				add_trait_no_notify = leader_trait_eci_heir
			}
		}
	}
	else_if = {
		limit = {
			ruler = {
				leader_class = commander
			}
		}
		create_leader = {
			class = commander
			name = random
			species = owner_main_species
			effect = {
				remove_trait = leader_trait_eci_royalty
				add_trait_no_notify = leader_trait_eci_king
				set_council_position = councilor_king
			}
		}
		create_leader = {
			class = commander
			name = random
			species = owner_main_species
			effect = {
				remove_trait = leader_trait_eci_royalty
				add_trait_no_notify = leader_trait_eci_heir
			}
		}
	}
	else_if = {
		limit = {
			ruler = {
				leader_class = commander
			}
		}
		create_leader = {
			class = commander
			name = random
			species = owner_main_species
			effect = {
				remove_trait = leader_trait_eci_royalty
				add_trait_no_notify = leader_trait_eci_king
				set_council_position = councilor_king
			}
		}
		create_leader = {
			class = commander
			name = random
			species = owner_main_species
			effect = {
				remove_trait = leader_trait_eci_royalty
				add_trait_no_notify = leader_trait_eci_heir
			}
		}
	}
	else = {
		create_leader = {
			class = official
			name = random
			species = owner_main_species
			effect = {
				remove_trait = leader_trait_eci_royalty
				add_trait_no_notify = leader_trait_eci_king
				set_council_position = councilor_king
			}
		}
		create_leader = {
			class = official
			name = random
			species = owner_main_species
			effect = {
				remove_trait = leader_trait_eci_royalty
				add_trait_no_notify = leader_trait_eci_heir
			}
		}
	}
}

generate_random_royalty = {
	random_list = {
		1 = {
			create_leader = {
				class = scientist
				name = random
				species = owner_main_species
				effect = {
					add_trait_no_notify = leader_trait_eci_royalty
				}
			}
		}
		1 = {
			create_leader = {
				class = official
				name = random
				species = owner_main_species
				effect = {
					add_trait_no_notify = leader_trait_eci_royalty
				}
			}
		}
		1 = {
			create_leader = {
				class = commander
				name = random
				species = owner_main_species
				effect = {
					add_trait_no_notify = leader_trait_eci_royalty
				}
			}
		}
	}
}